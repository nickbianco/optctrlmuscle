function heatRates = calcUmbergerProbe(Lce,Vce,F,Fiso,u,a, params)
%-------------------------------------------------------------------------------
% Muscle energetics model of Umberger et al. (2003) and Umberger (2010).
%
% USAGE
%   heatRates = calcUmbergerProbe(Lce,Vce,F,Fiso,u,a, params);
%
% INPUTS
%      Lce: length of the contractile element [m]
%      Vce: velocity of the contractile element [m/s] (shortening is negative)
%        F: force generated by the contractile element [N]
%     Fiso: the ratio (relative to Fmax) of force that would be generated
%           isometrically at a=1 (e.g., Fiso=1 at Lceopt)
%        u: excitation in [0,1]
%        a: activation in [0,1]
%   params: structure array containing muscle parameters
%
% OUTPUTS [W/kg_muscle_mass]
%   Activation heat rate
%   Maintenance heat rate
%   Shortening and lengthening heat rate
%   Mechanical work rate
%   Total rate of energy liberation
%
% Uchida.1611021431
%-------------------------------------------------------------------------------

% Check parameters.
if (Lce<0), error('Length of the contractile element cannot be negative'); end
if (F<0), error('Muscle force cannot be negative'); end
if (Fiso<0), error('Muscle isometric force cannot be negative'); end
if (u<0 || u>1), error('Excitation must be in [0,1]'); end
if (a<0 || a>1), error('Activation must be in [0,1]'); end
fields = {'rFT', 'VceMax_LceoptsPerSecond', 'Lceopt', 'muscleMass', ...
          'scalingFactorS', 'versionNumber'};
for i = 1:length(fields)
    if (~isfield(params,fields{i}))
        error(['Missing ''',fields{i},''' field in parameters struct']);
    end
end
if (params.rFT<0 || params.rFT>1)
    error('Ratio of fast-twitch muscle fibers must be in [0,1]'); end
if (params.Lceopt<0), error('Optimal fiber length cannot be negative'); end
if (params.muscleMass<0), error('Muscle mass cannot be negative'); end
if (params.scalingFactorS<0), error('Scaling factor S cannot be negative'); end
if (params.versionNumber ~= 2003 && params.versionNumber ~= 2010)
    error('Version number must be either 2003 or 2010'); end

% Activation and maintenance heat rate.
hdotAM = 128*params.rFT + 25;
hdotActivation = hdotAM*0.4;
hdotMaintenance = hdotAM*0.6;

% Shortening and lengthening heat rate (shortening is negative).
VtildeCE = Vce/params.Lceopt;
VtildeCEmax = params.VceMax_LceoptsPerSecond;
VtildeCEmax_FT = VtildeCEmax;
if (params.rFT < eps)
	VtildeCEmax_ST = params.VceMax_LceoptsPerSecond;
else
	VtildeCEmax_ST = VtildeCEmax_FT/2.5;
end
alphaS_ST = (4*25) / VtildeCEmax_ST;
alphaS_FT = (1*153) / VtildeCEmax_FT;
if (VtildeCE <= 0)
	% Shortening. ST fibers continue to liberate energy at their maximum rate if
    % the whole muscle shortens faster than the maximum velocity of ST fibers.
    
    % Note: "the first term on the right-hand side of Eq. (11)" is not a precise
    % statement. This calculation was clarified with Brian Umberger over email.
    STterm = min(-alphaS_ST*VtildeCE, alphaS_ST*VtildeCEmax_ST);
	hdotShortenLengthen = STterm*(1-params.rFT) - alphaS_FT*VtildeCE*params.rFT;
else
	% Lengthening.
	if (params.versionNumber == 2003)
		alphaL = 4*alphaS_ST;
    else
		alphaL = 0.3*alphaS_ST;
	end
	hdotShortenLengthen = alphaL*VtildeCE;
end

% Mechanical work rate (wdot>0 when shortening).
if (params.versionNumber == 2003)
	wdot = -F*Vce/params.muscleMass;
else
	wdot = max(-F*Vce/params.muscleMass, 0);
end

% Scaling to account for effect of length and activation on hdotAM and hdotSL,
% and dependence of total heat rate on metabolic working conditions (aerobic vs.
% anaerobic).
% --> length dependence
if (Lce > params.Lceopt)
	hdotMaintenance = hdotMaintenance * Fiso;
	hdotShortenLengthen = hdotShortenLengthen * Fiso;
end
% --> submaximal activation: rapid rise (slow decay) of heat production at
%                            beginning (end) of excitation
if (u > a)
	scalingFactorA = u;
else
	scalingFactorA = (u+a)/2;
end
scalingFactorA_AM = scalingFactorA^0.6;
scalingFactorA_S = scalingFactorA^2.0;
if (VtildeCE <= 0) %shortening
	hdotShortenLengthen = hdotShortenLengthen * scalingFactorA_S;
else %lengthening
	hdotShortenLengthen = hdotShortenLengthen * scalingFactorA;
end
hdotActivation = hdotActivation * scalingFactorA_AM;
hdotMaintenance = hdotMaintenance * scalingFactorA_AM;
% --> aerobic vs. anaerobic
hdotActivation = hdotActivation * params.scalingFactorS;
hdotMaintenance = hdotMaintenance * params.scalingFactorS;
hdotShortenLengthen = hdotShortenLengthen * params.scalingFactorS;

% Total heat rate cannot fall below 1.0 W/kg.
if (hdotActivation + hdotMaintenance + hdotShortenLengthen < 1.0)
	hdotActivation = 1.0 - hdotMaintenance - hdotShortenLengthen;
end

heatRates = [hdotActivation, hdotMaintenance, hdotShortenLengthen, wdot, ...
	hdotActivation + hdotMaintenance + hdotShortenLengthen + wdot];
