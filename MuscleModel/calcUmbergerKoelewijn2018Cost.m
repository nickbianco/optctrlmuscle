function Edot = calcUmbergerKoelewijn2018Cost(Lce,Vce,Fce,Fiso,u,a,params)
%-------------------------------------------------------------------------------
% Muscle energetics model of Umberger (2010) and Koelewijn et al. (2018).
%
% USAGE
%   heatRates = calcUmbergerKoelewijn2018Cost(Lce,Vce,F,Fiso,u,a, params);
%
% INPUTS
%      Lce: length of the contractile element [m]
%      Vce: velocity of the contractile element [m/s] (shortening is negative)
%      Fce: force generated by the contractile element [N]
%     Fiso: the ratio (relative to Fmax) of force that would be generated
%           isometrically at a=1 (e.g., Fiso=1 at Lceopt)
%        u: excitation in [0,1]
%        a: activation in [0,1]
%   params: array containing muscle parameters
%
% OUTPUT 
%     Edot: Total rate of energy liberation [W/kg_muscle_mass]
%
% Nick Bianco 08/13/2019
%-------------------------------------------------------------------------------

% Parameters
epsilon = 1e-3; % Smoothing parameter
rFT = params(1); % Ratio of fast twitch fibers
rST = 1 - rFT;
Lce_opt = params(2); % Optimal fiber length
VtildeCE = Vce/Lce_opt;
VtildeCEmax_FT = params(3);  % Max contraction velocity [Lce_opt/s]
if (rFT < eps)
	VtildeCEmax_ST = params(3);
else
	VtildeCEmax_ST = VtildeCEmax_FT / 2.5;
end
mass = params(4); % Muscle mass
S = params(5); % Scaling factor for aerobic (S = 1.5) vs anaerobic work (S = 1)

% Activation and maintenance heat rate.
A = u + 0.5*(0.5*(a-u) + sqrt((0.5*(a-u)).^2 + epsilon^2));
A_AM = A.^0.6;
flCE = ones(size(Lce));
flCE(Lce > Lce_opt) = Fiso(Lce > Lce_opt);
hdotAMnorm = 25*ones(size(a));
hdotAMnorm(a > rST) = 128*rFT + 25;
hdotAM = (0.4 + 0.6*flCE).*hdotAMnorm.*A_AM*S;

% Shortening and lengthening heat rate (shortening is negative).
A_SL = A.^2;
alpha_ST = 100 / VtildeCEmax_ST;
alpha_FT = 153 / VtildeCEmax_FT;
alpha_L = 0.3*alpha_ST;

VtildeCE_l = 0.5*(VtildeCE + sqrt(VtildeCE.^2 + epsilon^2));
VtildeCE_s = 0.5*(VtildeCE - sqrt(VtildeCE.^2 + epsilon^2));

idxSL = alpha_ST*VtildeCEmax_ST > -alpha_ST*VtildeCE_s*rST;
SLterm = 100*ones(size(VtildeCE_s));
SLterm(idxSL) = -alpha_ST*VtildeCE_s(idxSL)*rST;
hdotSLnorm = alpha_L*VtildeCE_l - alpha_FT*VtildeCE_s*rFT + SLterm;
hdotSL = A_SL.*hdotSLnorm.*flCE*S;

% Mechanical work rate.
wCEtilde = -Fce.*Vce / mass;
wCE = 0.5*(wCEtilde + sqrt(wCEtilde.^2 + epsilon^2));

Edot = hdotAM + hdotSL + wCE;
