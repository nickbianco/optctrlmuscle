function Edot = calcUmbergerCost2010(Lce,Vce,F,Fiso,u,a, params)
%-------------------------------------------------------------------------------
% Muscle energetics model of Umberger et al. (2003) and Umberger (2010).
%
% USAGE
%   heatRates = calcUmbergerProbe(Lce,Vce,F,Fiso,u,a, params);
%
% INPUTS
%      Lce: length of the contractile element [m]
%      Vce: velocity of the contractile element [m/s] (shortening is negative)
%        F: force generated by the contractile element [N]
%     Fiso: the ratio (relative to Fmax) of force that would be generated
%           isometrically at a=1 (e.g., Fiso=1 at Lceopt)
%        u: excitation in [0,1]
%        a: activation in [0,1]
%   params: structure array containing muscle parameters
%
% OUTPUTS [W/kg_muscle_mass]
%   Activation heat rate
%   Maintenance heat rate
%   Shortening and lengthening heat rate
%   Mechanical work rate
%   Total rate of energy liberation
%
% Uchida.1611021431
%-------------------------------------------------------------------------------

% Activation and maintenance heat rate.
hdotAM = ones(size(Vce))*(128*params(1) + 25);
hdotActivation = ones(size(Vce)).*(hdotAM*0.4);
hdotMaintenance = ones(size(Vce)).*(hdotAM*0.6);

% Shortening and lengthening heat rate (shortening is negative).
VtildeCE = Vce/params(2);
VtildeCEmax = params(3);
VtildeCEmax_FT = VtildeCEmax;
if (params(1) < eps)
	VtildeCEmax_ST = params(3);
else
	VtildeCEmax_ST = VtildeCEmax_FT/2.5;
end
alphaS_ST = (4*25) / VtildeCEmax_ST;
alphaS_FT = (1*153) / VtildeCEmax_FT;
% Shortening. ST fibers continue to liberate energy at their maximum rate if
% the whole muscle shortens faster than the maximum velocity of ST fibers.

% Note: "the first term on the right-hand side of Eq. (11)" is not a precise
% statement. This calculation was clarified with Brian Umberger over email.
idx = VtildeCE <= 0;
STterm = zeros(size(VtildeCE));
STterm(idx) = min(-alphaS_ST*VtildeCE(idx), ones(size(VtildeCE(idx)))*alphaS_ST*VtildeCEmax_ST);
hdotShortenLengthen = zeros(size(VtildeCE));
hdotShortenLengthen(idx) = STterm(idx)*(1-params(1)) - alphaS_FT*VtildeCE(idx)*params(1);

% Lengthening.
idx0 = VtildeCE > 0;
alphaL = 0.3*alphaS_ST;
hdotShortenLengthen(idx0) = alphaL*VtildeCE(idx0);

% Mechanical work rate (wdot>0 when shortening)
wdot = max(-F.*Vce / params(4), zeros(size(F)));

% Scaling to account for effect of length and activation on hdotAM and hdotSL,
% and dependence of total heat rate on metabolic working conditions (aerobic vs.
% anaerobic).
% --> length dependence
idx1 = Lce > params(2);
hdotMaintenance(idx1) = hdotMaintenance(idx1) .* Fiso(idx1);
hdotShortenLengthen(idx1) = hdotShortenLengthen(idx1) .* Fiso(idx1);
% --> submaximal activation: rapid rise (slow decay) of heat production at
%                            beginning (end) of excitation

scalingFactorA = zeros(size(a));
idx2 = u > a;
scalingFactorA(idx2) = u(idx2);
idx3 = u <= a;
scalingFactorA(idx3) = (u(idx3)+a(idx3))/2;

scalingFactorA_AM = scalingFactorA.^0.6;
scalingFactorA_S = scalingFactorA.^2.0;
idx4 = VtildeCE <= 0; %shortening 
hdotShortenLengthen(idx4) = hdotShortenLengthen(idx4) .* scalingFactorA_S(idx4);
idx5 = VtildeCE > 0; %lengthening
hdotShortenLengthen(idx5) = hdotShortenLengthen(idx5) .* scalingFactorA(idx5);

hdotActivation = hdotActivation .* scalingFactorA_AM;
hdotMaintenance = hdotMaintenance .* scalingFactorA_AM;
% --> aerobic vs. anaerobic
hdotActivation = hdotActivation * params(5);
hdotMaintenance = hdotMaintenance * params(5);
hdotShortenLengthen = hdotShortenLengthen * params(5);

% Total heat rate cannot fall below 1.0 W/kg.
hdotOverride = hdotActivation + hdotMaintenance + hdotShortenLengthen;
idx6 = hdotOverride < 1.0;
onesVec = ones(size(hdotOverride));
hdotActivation(idx6) = onesVec(idx6) - hdotMaintenance(idx6) - hdotShortenLengthen(idx6);

Edot = hdotActivation + hdotMaintenance + hdotShortenLengthen + wdot;
